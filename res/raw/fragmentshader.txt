precision mediump float;

uniform int isAmbientTextured;
uniform sampler2D ambientTexture;
uniform vec4 ambientColor;

uniform int isDiffuseTextured;
uniform sampler2D diffuseTexture;
uniform vec4 diffuseColor;

uniform int isSpecularTextured;
uniform sampler2D specularTexture;
uniform vec4 specularColor;

uniform vec3 lightPosition;

varying vec3 outVertex;
varying vec3 outNormalVertex;
varying vec3 outEyeDirection;
varying vec3 outLightDirection;
varying vec2 outTextureVertex;

void main()
  {
  vec4 LightColor = vec4(1.0, 1.0, 1.0, 1.0);
  float LightPower = 25.0;

  vec4 MaterialAmbientColor;
  vec4 MaterialDiffuseColor;
  vec4 MaterialSpecularColor;
  if(isDiffuseTextured == 0)
    {
    MaterialDiffuseColor = diffuseColor;
    }
  else
    {
    MaterialDiffuseColor = texture2D(diffuseTexture, outTextureVertex);
    }
  if(isAmbientTextured == 0)
    {
    MaterialAmbientColor = ambientColor * MaterialDiffuseColor;
    }
  else
    {
    MaterialAmbientColor = texture2D(ambientTexture, outTextureVertex) * MaterialDiffuseColor;
    }
  if(isSpecularTextured == 0)
    {
    MaterialSpecularColor = specularColor;
    }
  else
    {
    MaterialSpecularColor = texture2D(specularTexture, outTextureVertex);
    }

  float distance = length(lightPosition - outVertex);
  vec3 n = normalize(outNormalVertex);
  vec3 l = normalize(outLightDirection);
  float cosTheta = clamp(dot(n, l), 0.0, 1.0);

  vec3 E = normalize(outEyeDirection);
  vec3 R = reflect(-l, n);
  float cosAlpha = clamp(dot(E, R), 0.0, 1.0);

  vec4 color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5.0) / (distance * distance);
  gl_FragColor = color;
  }